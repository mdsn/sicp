(#%require racket/stream)

(define (integers-starting-from n)
  (stream-cons n (integers-starting-from (+ n 1))))

(define integers (integers-starting-from 1))

(define (pull s n)
  (stream->list (stream-take s n)))

(define (average x y)
  (/ (+ x y) 2))

(define (stream-scale s factor)
  (stream-map (lambda (x) (* x factor)) s))

(define (sqrt-improve guess x)
  (average guess (/ x guess)))

(define (sqrt-stream x)
  (define guesses
    (stream-cons 1.0
                 (stream-map (lambda (guess)
                               (sqrt-improve guess x))
                             guesses)))
  guesses)

(pull (sqrt-stream 2) 10)
; '(1.0
;   1.5
;   1.4166666666666665
;   1.4142156862745097
;   1.4142135623746899
;   1.414213562373095
;   1.414213562373095
;   1.414213562373095
;   1.414213562373095
;   1.414213562373095)
(define (stream-map-n proc . argstreams)
  (if (stream-empty? (car argstreams))
    empty-stream
    (stream-cons
      (apply proc (map stream-first argstreams))
      (apply stream-map-n
             (cons proc (map stream-rest argstreams))))))

(define (add-streams s t)
  (stream-map-n + s t))

(define (partial-sums s)
  (define (iter t acc)
    (let ((acc (+ acc (stream-first t))))
      (stream-cons acc
                   (iter (stream-rest t) acc))))
  (iter s 0))

(pull (partial-sums integers) 10) ; '(1 3 6 10 15 21 28 36 45 55)

(define (pi-summands n)
  (stream-cons (/ 1.0 n)
               (stream-map - (pi-summands (+ n 2)))))

(define pi-stream
  (stream-scale (partial-sums (pi-summands 1)) 4))

(pull pi-stream 10)
; '(4.0
;   2.666666666666667
;   3.466666666666667
;   2.8952380952380956
;   3.3396825396825403
;   2.9760461760461765
;   3.2837384837384844
;   3.017071817071818
;   3.2523659347188767
;   3.0418396189294032)

(define (square n)
  (* n n))

(define (euler-transform s)
  (let ((s0 (stream-ref s 0))
        (s1 (stream-ref s 1))
        (s2 (stream-ref s 2)))
    (stream-cons (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-rest s)))))

(pull (euler-transform pi-stream) 10)
; '(3.166666666666667
;   3.1333333333333337
;   3.1452380952380956
;   3.13968253968254
;   3.1427128427128435
;   3.1408813408813416
;   3.142071817071818
;   3.1412548236077655
;   3.1418396189294033
;   3.141406718496503)

(define (make-tableau transform s)
  (stream-cons s
               (make-tableau transform
                             (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-first
              (make-tableau transform s)))

(pull (accelerated-sequence euler-transform pi-stream) 5)
; '(4.0
;   3.166666666666667
;   3.142105263157895
;   3.141599357319005
;   3.1415927140337785)

; 3.63
; We want to understand the difference between the book's implementation:
;
;    (define (sqrt-stream x)
;      (define guesses
;        (stream-cons 1.0
;                     (stream-map (lambda (guess)
;                                   (sqrt-improve guess x))
;                                 guesses)))
;      guesses)
;
; And this one:
;
;    (define (sqrt-stream x)
;      (stream-cons 1.0
;                   (stream-map (lambda (guess)
;                                 (sqrt-improve guess x))
;                               (sqrt-stream x))))
;
; Remember that stream-map is:
;
;    (define (stream-map f s)
;      (if (stream-empty? s)
;        empty-stream
;        (stream-cons (f (stream-first s))
;                     (stream-map f (stream-rest s)))))
;
; So in the first implementation we are sending a reference to the single
; `guesses` stream that is local to sqrt-stream. Thus stream-map always
; evaluates and pulls on this one instance of the stream, avoiding waste.
; By doing recursive calls instead, the second implementation restarts the
; same stream on every call, wasting all the previous work.
;
; Even if delay were not memoized, the first version would not need to
; recompute initial values--it only ever uses the subsequent heads of the
; stream to get the next better guess, without accessing previously computed
; items.

; 3.64
(define (stream-limit s tolerance)
  (let ((s0 (stream-first s))
        (s1 (stream-first (stream-rest s))))
    (if (< (abs (- s0 s1)) tolerance)
      s1
      (stream-limit (stream-rest s) tolerance))))

(define (sqrt-limit x tolerance)
  (stream-limit (sqrt-stream x) tolerance))

(sqrt-limit 2 0.001) ; 1.4142135623746899
(sqrt-limit 2 0.1) ; 1.4166666666666665

; 3.65
(define (ln2-summands n)
  (stream-cons (/ 1.0 n)
               (stream-map - (ln2-summands (+ n 1)))))

; (pull (ln2-summands 1) 5) ; '(1.0 -0.5 0.3333333333333333 -0.25 0.2)

(define ln2-stream
  (partial-sums (ln2-summands 1)))

(pull ln2-stream 5) ; '(1.0 0.5 0.8333333333333333 0.5833333333333333 0.7833333333333332)
(pull (euler-transform ln2-stream) 5) ; '(0.7 0.6904761904761905 0.6944444444444444 0.6924242424242424 0.6935897435897436)
(pull (accelerated-sequence euler-transform ln2-stream) 5) ; '(1.0 0.7 0.6932773109243697 0.6931488693329254 0.6931471960735491)

(define (interleave s t)
  (if (stream-empty? s)
    t
    (stream-cons (stream-first s)
                 (interleave t (stream-rest s)))))

(define (pairs s t)
  (stream-cons
    (list (stream-first s) (stream-first t))
    (interleave (stream-map (lambda (x) (list (stream-first s) x))
                            (stream-rest t))
                (pairs (stream-rest s) (stream-rest t)))))

(display (pull (pairs integers integers) 10))
; ((1 1) (1 2) (2 2) (1 3) (2 3) (1 4) (3 3) (1 5) (2 4) (1 6))

; 3.66
(define negatives (stream-map (lambda (x) (* -1 x))
                              integers))
(display (pull (pairs integers negatives) 20))
; ((1 -1) (1 -2) (2 -2) (1 -3) (2 -3) (1 -4) (3 -3) (1 -5) (2 -4) (1 -6) (3 -4) (1 -7) (2 -5) (1 -8) (4 -4) (1 -9) (2 -6) (1 -10) (3 -5) (1 -11))
;   1      2      3      4      5      6      7      8      9      10     11     12     13     14     15     16     17     18      19     20
;
; (1 -1)  (1 -2)  (1 -3)  (1 -4)  (1 -5)  ...
;         (2 -2)  (2 -3)  (2 -4)  (2 -5)  ...
;                 (3 -3)  (3 -4)  (3 -5)  ...
;                         (4 -4)  (4 -5)  ...
;                                 (5 -5)  ...
;                                         ...

; 1   2   4   6   8   10   12   14   16   18  20
;     3   5   9   13  17
;         7   11  19
;             15  21

; It seems after the first element (s_0, t_0), every other element
; goes into row 1, interleaving elements into each lower row as they
; become available over the diagonal. (?) Element number 21 would be...
; (4 -5)
(display (stream-ref (pairs integers negatives) 22)) ; (4 -5)   0 indexed

; 3.67
; Consider the first row and column of the desired sequence:
;
;   (1 1)  (1 2)  (1 3)  ...
;   (2 1)
;   (3 1)
;   (4 1)
;   ...
;
; It's clear that after the corner element (1 1), its immediate neighbors
; are reflections of each other; that is, if one of them is (a b) then the
; other must be (b a). Therefore we can cover this entire "half frame" by
; yielding element (a a), then interleaving pairs with one increasing
; coordinate with their reflections; then interleaving all of this sequence
; with the same procedure starting from (a+1 a+1).

(define (all-pairs s t)
  (let* ((a (stream-first s))
         (b (stream-first t))
         (top-row (stream-map (lambda (x) (list a x))
                              (stream-rest t)))
         (left-col (stream-map (lambda (p) (list (cadr p) (car p)))
                               top-row)))
    (stream-cons (list a b)
                 (interleave (interleave top-row left-col)
                             (all-pairs (stream-rest s) (stream-rest t))))))

(display (pull (all-pairs integers integers) 30))
; ((1 1) (1 2) (2 2) (2 1) (2 3) (1 3) (3 3) (3 1)
;   1     2     3     4     5     6     7     8
;  (3 2) (1 4) (3 4) (4 1) (2 4) (1 5) (4 4) (5 1)
;   9     10    11    12    13    14    15    16
;  (4 2) (1 6) (4 3) (6 1) (2 5) (1 7) (4 5) (7 1)
;   17    18    19    20    21    22    23    24
;  (5 2) (1 8) (3 5) (8 1) (2 6) (1 9))
;   25    26    27    28    29    30
;
; 1   2   6   10   14   18   22   26   30
; 4   3   5   13   21   29
; 8   9   7   11   27
; 12  17  19  15   23
; 16  25                    AND SO ON
; 20                          AND SO FORTH
; 24                            :)
; 28

; 3.68
; Louis's pairs:

(define (louis-pairs s t)
  (interleave
    (stream-map (lambda (x) (list (stream-first s) x))
                t)
    (pairs (stream-rest s) (stream-rest t))))

(display (pull (louis-pairs integers integers) 20))
; ((1 1) (2 2) (1 2) (2 3) (1 3)
;   1     2     3     4     5
;  (3 3) (1 4) (2 4) (1 5) (3 4)
;   6     7     8     9     10
;  (1 6) (2 5) (1 7) (4 4) (1 8)
;   11    12    13    14    15
;  (2 6) (1 9) (3 5) (1 10) (2 7))
;   16    17    18    19     20
;
; 1  3  5  7  9  11 13 15 17 19
;    2  4  8  12 16 20
;       6  10 18
;          14
;
; Seems to work.

; 3.69
; (1 1 1)
; (1 1 2)
; (1 2 2)
; (2 2 2)
; (2 2 3)
; ...
(define (triples s t u)
  (let ((a (stream-first s))
        (b (stream-first t))
        (c (stream-first u)))
    (stream-cons
      (list a b c)
      (interleave (stream-map (lambda (p) (cons a p))
                              (pairs (stream-rest t) (stream-rest u)))
                  (triples (stream-rest s) (stream-rest t) (stream-rest u))))))

(display (pull (triples integers integers integers) 20))
; ((1 1 1) (1 2 2) (2 2 2) (1 2 3)
;  (2 3 3) (1 3 3) (3 3 3) (1 2 4)
;  (2 3 4) (1 3 4) (3 4 4) (1 2 5)
;  (2 4 4) (1 4 4) (4 4 4) (1 2 6)
;  (2 3 5) (1 3 5) (3 4 5) (1 2 7))

(define pythagorean-triples
  (stream-filter
    (lambda (t)
      (let ((i (car t)) (j (cadr t)) (k (caddr t)))
        (= (+ (square i) (square j))
           (square k))))
    (triples integers integers integers)))

(display (pull pythagorean-triples 3)) ; ((3 4 5) (6 8 10) (5 12 13))
; This is crazy slow--pulling 10 pythagorean triples just doesn't return.

; 3.70
(define (merge-weighted s t w)
  (let ((a (stream-first s))
        (b (stream-first t)))
    (cond ((< (w a) (w b))
           (stream-cons a (merge-weighted (stream-rest s) t w)))
          ((< (w b) (w a))
           (stream-cons b (merge-weighted s (stream-rest t) w)))
          (else
            ; The equivalent in `merge` wouldn't work for merging streams of
            ; pairs if we need to generate all pairs, because it would skip
            ; over consecutive pairs of equal weight.
            (stream-cons a (merge-weighted (stream-rest s) t w))))))

(define (weighted-pairs s t w)
  (stream-cons
    (list (stream-first s) (stream-first t))
    (merge-weighted (stream-map (lambda (x) (list (stream-first s) x))
                                (stream-rest t))
                    (weighted-pairs (stream-rest s) (stream-rest t) w)
                    w)))

(define (w1 p)
  (+ (car p) (cadr p)))

(display (pull (weighted-pairs integers integers w1) 20))
; ((1 1) (1 2) (1 3) (2 2) (1 4)
;  (2 3) (1 5) (2 4) (3 3) (1 6)
;  (2 5) (3 4) (1 7) (2 6) (3 5)
;  (4 4) (1 8) (2 7) (3 6) (4 5))

(define (w2 p)
  (let ((i (car p))
        (j (cadr p)))
    (+ (* 2 i) (* 3 j) (* 5 i j))))

(define (divisible? n d)
  (= (remainder n d) 0))

(define (pair-divisible? p d)
  (or (divisible? (car p) d)
      (divisible? (cadr p) d)))

(define (divisibility-filter p)
  (not (or (pair-divisible? p 2)
           (pair-divisible? p 3)
           (pair-divisible? p 5))))

(define second-pairs
  (pull (stream-filter divisibility-filter
                       (weighted-pairs integers integers w2)) 20))

(display second-pairs)
; ((1 1) (1 7) (1 11) (1 13) (1 17)
;  (1 19) (1 23) (1 29) (1 31) (7 7)
;  (1 37) (1 41) (1 43) (1 47) (1 49)
;  (1 53) (7 11) (1 59) (1 61) (7 13))


